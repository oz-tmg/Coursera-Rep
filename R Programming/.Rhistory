#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]  #subsets the rows that match the 'day' argument
median(dat_subset[, "Weight"], na.rm=TRUE)      #identifies the median weight
#while stripping out the NAs
}
weightmedian(directory = "diet_data", day = 20)
weightmedian("diet_data", 4)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
files_list
tmp <- vector(mode="list",length=length(id)) #our empty list we will fill
for (i in seq_along(files_list)) {
initial <- read.csv(i, nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
tmp[[i]] <- read.csv(files_full[[i]], header=T, sep=",", colClasses = classes)
}
output <- do.call(rbind, tmp)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
pollutantmean("~/datasciencecoursera/specdata/", "sulfate", 1:10)
output
View(output)
View(data)
View(output)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
files_list
tmp <- vector(mode="list",length=length(id)) #our empty list we will fill
for (i in seq_along(files_list)) {
initial <- read.csv(i, nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
tmp[[i]] <- read.csv(files_full[[i]], header=T, sep=",", colClasses = classes)
}
output <- do.call(rbind, tmp)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
pollutantmean("specdata", "sulfate", 1:10)
files_list
files_list <- list.files("specdata", full.names=T)
files_list
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
files_list
tmp <- vector(mode="list",length=length(id)) #our empty list we will fill
for (i in seq_along(files_list)) {
initial <- read.csv(i, nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
tmp[[i]] <- read.csv(files_full[[i]], header=T, sep=",", colClasses = classes)
}
output <- do.call(rbind, tmp)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
files_list
tmp <- vector(mode="list",length=length(id)) #our empty list we will fill
for (i in seq_along(files_list)) {
#initial <- read.csv(i, nrows  = 100)       ## data sets can be large so read first 100 rows
#classes <- sapply(initial,class)           ## to identify column data types and then read them all
#tmp[[i]] <- read.csv(files_full[[i]], header=T, sep=",", colClasses = classes)
tmp[[i]] <- read.csv(files_full[[i]], header=T, sep=",")
}
output <- do.call(rbind, tmp)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
pollutantmean("specdata", "sulfate", 1:10)
files_full <- list.files("diet_data",full.names=TRUE)
files_full
head(read.csv(files_full[3]))
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
files_list
tmp <- vector(mode="list",length=length(id)) #our empty list we will fill
for (i in seq_along(files_list)) {
#initial <- read.csv(i, nrows  = 100)       ## data sets can be large so read first 100 rows
#classes <- sapply(initial,class)           ## to identify column data types and then read them all
#tmp[[i]] <- read.csv(files_full[[i]], header=T, sep=",", colClasses = classes)
temp_file[[i]] <- read.csv(files_full[[i]], header=T, sep=",")
}
output <- do.call(rbind, temp_file)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("~/datasciencecoursera/specdata/", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
files_list
temp_file <- vector(mode="list",length=length(id)) #our empty list we will fill
for (i in seq_along(files_list)) {
#initial <- read.csv(i, nrows  = 100)       ## data sets can be large so read first 100 rows
#classes <- sapply(initial,class)           ## to identify column data types and then read them all
#tmp[[i]] <- read.csv(files_full[[i]], header=T, sep=",", colClasses = classes)
temp_file[[i]] <- read.csv(files_full[[i]], header=T, sep=",")
}
output <- do.call(rbind, temp_file)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
pollutantmean("~/datasciencecoursera/specdata/", "sulfate", 1:10)
## [1] 4.064
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
files_list
temp_file <- vector(mode="list",length=length(id)) #our empty list we will fill
for (i in seq_along(files_list)) {
#initial <- read.csv(i, nrows  = 100)       ## data sets can be large so read first 100 rows
#classes <- sapply(initial,class)           ## to identify column data types and then read them all
#tmp[[i]] <- read.csv(files_full[[i]], header=T, sep=",", colClasses = classes)
temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
}
output <- do.call(rbind, temp_file)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
temp_file <- vector(mode="list",length=length(id)) #our empty list we will fill
for (i in seq_along(files_list)) {
#initial <- read.csv(i, nrows  = 100)       ## data sets can be large so read first 100 rows
#classes <- sapply(initial,class)           ## to identify column data types and then read them all
#tmp[[i]] <- read.csv(files_full[[i]], header=T, sep=",", colClasses = classes)
temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
}
output <- do.call(rbind, temp_file)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
output
temp_file
files_list
id1 <- 70:72
id1
temp_file1 <- vector(mode="list",length=length(id1))
temp_file1
length(temp_file1)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
temp_file <- vector(mode="list",length=length(id)) #our empty list we will fill
j <- 1
for (i in seq_along(id)) {
initial <- read.csv(i, nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
temp_file[[j]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
j <- j + 1
}
output <- do.call(rbind, temp_file)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
##pollutantmean("~/datasciencecoursera/specdata/", "sulfate", 1:10)
## [1] 4.064
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
temp_file <- vector(mode="list",length=length(id)) #our empty list we will fill
j <- 1
for (i in seq_along(id)) {
initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
temp_file[[j]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
j <- j + 1
}
output <- do.call(rbind, temp_file)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
##pollutantmean("~/datasciencecoursera/specdata/", "sulfate", 1:10)
## [1] 4.064
pollutantmean("specdata", "sulfate", 1:10)
directory <- "specdata"
pollutant <- "nitrate"
id1 <- 70:72
files_list <- list.files(directory, full.names=T)
files_list
for (i in seq_along(files_list)) {
initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
tmp[[i]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
}
for (i in seq_along(id)) {
initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
tmp[[i]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
}
for (i in seq_along(id1)) {
initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
tmp[[i]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
}
for (i in seq_along(id1)) {
#initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
#classes <- sapply(initial,class)           ## to identify column data types and then read them all
#tmp[[i]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
#temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
}
for (i in seq_along(id1)) {
initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
#classes <- sapply(initial,class)           ## to identify column data types and then read them all
#tmp[[i]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
#temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
}
initial
for (i in seq_along(id1)) {
initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
#tmp[[i]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
#temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
}
for (i in seq_along(id1)) {
initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
}
for (i in seq_along(id1)) {
#initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
#classes <- sapply(initial,class)           ## to identify column data types and then read them all
#temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
}
temp_file <- vector(mode="list",length=length(id1)) #our empty list we will fill
for (i in seq_along(id1)) {
#initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
#classes <- sapply(initial,class)           ## to identify column data types and then read them all
#temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
}
for (i in seq_along(id1)) {
initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
#temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
files_list
tmp <- vector(mode="list",length=length(id)) #our empty list we will fill
for (i in seq_along(files_list)) {
#initial <- read.csv(i, nrows  = 100)       ## data sets can be large so read first 100 rows
#classes <- sapply(initial,class)           ## to identify column data types and then read them all
#tmp[[i]] <- read.csv(files_full[[i]], header=T, sep=",", colClasses = classes)
tmp[[i]] <- read.csv(files_full[[i]], header=T, sep=",")
}
output <- do.call(rbind, tmp)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
temp_file <- vector(mode="list",length=length(id)) #our empty list we will fill
j <- 1
for (i in seq_along(id)) {
initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
temp_file[[j]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
j <- j + 1
}
output <- do.call(rbind, temp_file)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
##pollutantmean("~/datasciencecoursera/specdata/", "sulfate", 1:10)
## [1] 4.064
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
temp_file <- vector(mode="list",length=length(id)) #our empty list we will fill
j <- 1
for (i in seq_along(id)) {
initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
temp_file[[j]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
j <- j + 1
}
output <- do.call(rbind, temp_file)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
##pollutantmean("~/datasciencecoursera/specdata/", "sulfate", 1:10)
## [1] 4.064
pollutantmean("specdata", "sulfate", 1:10)
directory <- "specdata"
pollutant <- "nitrate"
id1 <- 70:72
files_list <- list.files(directory, full.names=T)
temp_file <- vector(mode="list",length=length(id1)) #our empty list we will fill
for (i in seq_along(id1)) {
initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
#temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
}
directory <- "specdata"
pollutant <- "nitrate"
id1 <- 70:72
files_list <- list.files(directory, full.names=T)
temp_file <- vector(mode="list",length=length(id1)) #our empty list we will fill
j <- 1
for (i in seq_along(id1)) {
initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
temp_file[[j]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
#temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
j = j + 1
}
classes
for (i in seq_along(id1)) {
initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
#temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
j = j + 1
}
temp_file
j
for (i in seq_along(id1)) {
initial <- read.csv(files_list[[i]], nrows  = 100)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
temp_file[[j]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
#temp_file[[i]] <- read.csv(files_list[[i]], header=T, sep=",")
j <- j + 1
}
classes
initial
j <- 1
for (i in seq_along(id1)) {
initial <- read.csv(files_list[[i]], nrows  = 100, skipNul)       ## data sets can be large so read first 100 rows
classes <- sapply(initial, class)           ## to identify column data types and then read them all
temp_file[[j]] <- read.csv(files_list[[i]], header=T, sep=",")
j <- j + 1
}
for (i in seq_along(id1)) {
initial <- read.table(files_list[[i]], nrows  = 100, skipNul)       ## data sets can be large so read first 100 rows
classes <- sapply(initial, class)           ## to identify column data types and then read them all
temp_file[[j]] <- read.table(files_list[[i]], header=T, sep=",", colClasses = classes)
j <- j + 1
}
for (i in seq_along(id1)) {
initial <- read.table(files_list[[i]], nrows  = 100, skipNul=T)       ## data sets can be large so read first 100 rows
classes <- sapply(initial, class)           ## to identify column data types and then read them all
temp_file[[j]] <- read.table(files_list[[i]], header=T, sep=",", colClasses = classes)
j <- j + 1
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
temp_file <- vector(mode="list",length=length(id)) #our empty list we will fill
j <- 1
for (i in seq_along(id)) {
initial <- read.csv(files_list[[i]], nrows  = 100, skipNul=T)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
temp_file[[j]] <- read.csv(files_list[[i]], header=T, sep=",", colClasses = classes)
j <- j + 1
}
output <- do.call(rbind, temp_file)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
##pollutantmean("~/datasciencecoursera/specdata/", "sulfate", 1:10)
## [1] 4.064
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
files_list <- list.files(directory, full.names=T)
temp_file <- vector(mode="list",length=length(id)) #our empty list we will fill
j <- 1
for (i in seq_along(id)) {
initial <- read.table(files_list[[i]], nrows  = 100, skipNul=T)       ## data sets can be large so read first 100 rows
classes <- sapply(initial,class)           ## to identify column data types and then read them all
temp_file[[j]] <- read.table(files_list[[i]], header=T, sep=",", colClasses = classes)
j <- j + 1
}
output <- do.call(rbind, temp_file)
if(pollutant=="sulfate") {
mean(output$sulfate, na.rm=TRUE)
}
else if(pollutant=="nitrate") {
mean(output$nitrate, na.rm=TRUE)
}
else{
return("You are a naughty person! Please enter either 'sulfate' or 'nitrate' in double quotations!")
}
}
pollutantmean("specdata", "sulfate", 1:10)
